2005-04-12  Jonathan Graehl  <graehl@isi.edu>

	* 2hash.h: visit_key_val

2005-04-07  Jonathan Graehl  <graehl@isi.edu>

	* genio.h (CREATE_INSERTER_T1): for classes with 1 template arg.

2005-03-30  Jonathan Graehl  <graehl@isi.edu>

	* io.hpp: unget in show_error_context to show the last (failed) char
	report file position before rading extra chars

	* dynarray.h: for reading arrays terminated by EOF, forgot to
	change undo_push_back_raw to pop_back (pop_back not being done
	meant an extra 0 in sortpercent)

	* weight.h: set 15 digits if double, 7 digits if float

2005-03-29  Jonathan Graehl  <graehl@isi.edu>

	* arc.h: had to change name of Arc to FSTArc for some insane
	reason (i.e. I haven't a clue)

	* normalize.hpp: typedefs WD (for inside/outside) count_t (counts)
	prob_t (probs) ... intention to make prob_t float-based, count_t
	double-based logweights - but will need a change to
	normalize-in-place ... also changed to integer indices instead of
	ill-conceived pointeroffset optimization

	* weight.h: Weight = logweight<FLOAT_TYPE> - not tested with
	carmel or tt

	* funcs.hpp: lowercase k m g = base10. upper=base2

2005-03-26  Jonathan Graehl  <graehl@isi.edu>

	* io.hpp: moved everything from genio.h except what's used for
	get_from print_on macros

2005-03-21  Jonathan Graehl  <graehl@isi.edu>

	* genio.h (FRIEND_INSERTER): const C arg -> const C &arg

2005-03-17  Jonathan Graehl  <graehl@isi.edu>

	* funcs.hpp: added maybe_{decrease,increase}_{min,max} and
	accumulate for assoc containers, and ONE_PLUS_EPSILON,
	slightly_{smaller,larger} (also used in SyntaxDecoder)

2005-02-28  Jonathan Graehl  <graehl@isi.edu>

	* memmap.hpp: added filename to exceptions

2005-01-27  Jonathan Graehl  <graehl@isi.edu>

	* normalize.hpp: add-k-smoothing (denominator) (set directly or in
	constructor)

2004-09-23  Jonathan Graehl  <graehl@isi.edu>

	* weight.h: e^-2.68116e+11 -2.68116e+11ln 

	UPDATE: so that nobody has to be confused about what the "ln"
	suffix means, the new default output shall be "e^n" (except in
	case of zero, which is just "0" and not "e^-INF", since "-INF"
	doesn't read/write properly using the standard I/O libraries). I
	suggest everyone only produce such outputs, but be prepared to
	read arbitrary real numbers, as well as those starting with "e^".


